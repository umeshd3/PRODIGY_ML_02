# -*- coding: utf-8 -*-
"""Task-02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_elI3fosskYv3KkouiLvYowNv_EdztR6
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

# Load the dataset
data = pd.read_csv("/content/Mall_Customers.csv")

# Select the Annual Income and Spending Score columns
X = data.iloc[:, [3, 4]].values

# Determine the optimal number of clusters using the Elbow method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

# Plot the Elbow method graph to find the optimal number of clusters
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')  # Within-Cluster-Sum-of-Squares
plt.show()

# Based on the Elbow method, let's choose the optimal number of clusters (e.g., 5)
kmeans = KMeans(n_clusters=5, init='k-means++', max_iter=300, n_init=10, random_state=0)
pred_y = kmeans.fit_predict(X)

# Add the cluster labels to the dataset
data['Cluster'] = pred_y

# Visualize the clusters
plt.scatter(X[pred_y == 0, 0], X[pred_y == 0, 1], s=100, c='red', label='Cluster 1')
plt.scatter(X[pred_y == 1, 0], X[pred_y == 1, 1], s=100, c='blue', label='Cluster 2')
plt.scatter(X[pred_y == 2, 0], X[pred_y == 2, 1], s=100, c='green', label='Cluster 3')
plt.scatter(X[pred_y == 3, 0], X[pred_y == 3, 1], s=100, c='cyan', label='Cluster 4')
plt.scatter(X[pred_y == 4, 0], X[pred_y == 4, 1], s=100, c='magenta', label='Cluster 5')

plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()

# You can now analyze and interpret the customer groups based on the clustering results.